from os.path import join
import itertools
import pandas as pd

configfile: 'config/config.yml'

if config['run_cohort'] == None:
    cohorts = config['cohorts']
else:
    cohorts = [config['run_cohort']]

#subjects is a dict, indexed by the cohort
#load participants.tsv file, and strip off sub- from participant_id column
subjects = dict()
all_subjects = list()
for cohort in config['cohorts']:
    subjects[cohort] = [ s.strip('sub-') for s in pd.read_table(config['participants_tsv'][cohort]).participant_id.to_list() ] 
    all_subjects = all_subjects + subjects[cohort]

#get channels using keys in in_images
channels = list(config['in_images'].keys())

#need this to make sure iterations don't go below 0!
wildcard_constraints:
    iteration="[0-9]+",
    cohort="[a-zA-Z0-9]+",
    channel="[a-zA-Z0-9]+"


if config['run_iter'] != None:
    rule all_iter:
        input:
             expand('results/cohort-{cohort}/iter_{iter}/template_{channel}.nii.gz',cohort=cohorts,channel=channels,iter=config['run_iter'])
else:
    rule all_finaltemplate:
        input:
            json = 'results/tpl-{name}/template_description.json'.format(name=config['template_name'])



#optional
rule all_composite_warps:
    input: expand('results/composite/sub-{subject}_to-{template}_via-cohort_{warptype}.nii.gz',\
                    template=config['std_template_name'],\
                    warptype=['CompositeWarp','CompositeInverseWarp'],\
                    subject=all_subjects)


include: 'rules/common.smk'
include: 'rules/reg_t2_to_t1.smk'
include: 'rules/ants_template.smk'
include: 'rules/templateflow.smk'
include: 'rules/cohort_template_to_std.smk'

